# coding: utf-8
from decimal import Decimal


VOLUME_LOWER = Decimal(7)
PRECISION = Decimal('.001')
FFPROBE = 'ffprobe'
FFMPEG = 'ffmpeg'
IM_CONVERT = 'convert'
CODE = 'utf-8'
TAR = 'tar'
RADOS = 'rados'


class Sound:
    def __init__(self, path, start, duration, suppress=False):
        """
        @param path: Audio file path.
        @type path: str
        @param start: The final position of this audio in the result sound track.
        @type start: float
        @param duration: Audio duration.
        @type duration: float
        @param suppress: When playing this sound, bgm will be suppressed to silence.
        @type suppress: bool
        """
        self.path = path
        self.start = Decimal(start)
        self.duration = Decimal(duration)
        self.suppress = suppress
        self.end = self.start + self.duration  # just for convenience
        self.mean_volume, self.max_volume = Decimal(-90), Decimal(-90)


class VolumeChange:

    silence_vol = 10 ** (Decimal(-91) / Decimal(20))
    # -91dB the lowest volume generated by ffmpeg anullsrc filter.
    # This will make almost all sound to silence.

    def __init__(self, start, end, change_type, lower_volume, suppressed=False, from_to_silence=False):
        """
        @type start: Decimal
        @type end: Decimal
        @param change_type: Should be one of "in", "out" and "lower"
        @type change_type: str
        @param lower_volume: will change volume to this value (dB).
        @type lower_volume: Decimal
        @param suppressed: This part of bgm will be suppressed.
        @type suppressed: bool
        @param from_to_silence: Fade in/out to/from silence from/to a relative lower volume, not to full
        @type from_to_silence: bool
        """
        self.start = Decimal(start)
        self.end = Decimal(end)
        self.duration = self.end - self.start
        self.change_type = change_type
        self.lower_volume = lower_volume
        self.suppressed = suppressed  # whether lower to silence. If true, `lower_volume` will be ignored.
        self.from_to_silence = from_to_silence

    def extend_to(self, new_end, lower_volume, suppressed):
        """
        Extend self.end to a new value, and update self.duration then.
        @param new_end:
        @type new_end: Decimal
        @param lower_volume: Volume change in extended part
        @type lower_volume: Decimal
        @param suppressed: This part of bgm will be suppressed.
        @type suppressed: bool
        @return: None
        @rtype: None
        """
        self.end = new_end
        self.duration = self.end - self.start
        if lower_volume < self.lower_volume:
            self.lower_volume = lower_volume  # To keep volume the same in existed part and extended part
        if suppressed:
            self.suppressed = True

    def __str__(self):
        """
        @return: volume change description in ffmpeg volume filter format
        @rtype: str
        """
        start = self.start.quantize(PRECISION)
        end = self.end.quantize(PRECISION)

        if self.suppressed and not self.from_to_silence:
            volume = self.silence_vol
        else:
            volume = 10 ** (self.lower_volume / Decimal(20))  # type: Decimal
            # To calc decibel:                dB = 20 * log10( dst / src )
            # so that           `self.bgm_scale` = 10 ^ (dB / 20)
        if self.change_type == 'lower':
            return 'volume=enable=\'between(t,%s,%s)\':volume=%s:eval=frame' % \
                   (start, end, volume)
        elif self.change_type == 'in':
            if self.from_to_silence:
                return 'volume=enable=\'between(t,%s,%s)\':volume=\'%s-%s*(t-%s)\':eval=frame' % \
                       (start, end,
                        volume, (volume / self.duration).quantize(PRECISION), start)
            else:
                return 'volume=enable=\'between(t,%s,%s)\':volume=\'1-%s*(t-%s)\':eval=frame' % \
                       (start, end,
                        ((Decimal(1) - volume) / self.duration).quantize(PRECISION),
                        start)
        elif self.change_type == 'out':
            if self.from_to_silence:  # only fade out to lower_volume
                return 'volume=enable=\'between(t,%s,%s)\':volume=\'%s+%s*(t-%s)\':eval=frame' % \
                       (start, end, self.silence_vol,
                        (volume - self.silence_vol) / self.duration.quantize(PRECISION),
                        start)
            else:  # fade out to full
                return 'volume=enable=\'between(t,%s,%s)\':volume=\'%s+%s*(t-%s)\':eval=frame' % \
                       (start, end, volume,
                        ((Decimal(1) - volume) / self.duration).quantize(PRECISION),
                        start)
        else:
            return 'wtf'  # make sure exception thrown


#def ffmpeg_mix_audio(bgm_file, output_file, sounds, adelay=None):
#    """
#    Merge audio files with ffmpeg.
#    Procedures: Count the intervals between foreground sounds, fill them with silent audios,
#                concat the silents and foreground sounds, merge the result with bgm.
#    @param bgm_file: Background audio, usually kind of music.
#    @type bgm_file: str
#    @param output_file: Final result audio file.
#    @type output_file: str
#    @param sounds: [[audio_file, start, length, suppress]...], will be tranformed to list[Sound]
#    @type sounds: [[str]]
#    @param adelay: silence length in the beginning if prologue exists.
#    @type adelay:
#    @return: None
#    @rtype: None
#    """
#    log.info(ffmpeg_mix_audio,
#             "FUNCTION CALLING: ffmpeg_mix_audio, input: {bgm_file}, output: {output_file} "
#             "sounds: {sounds}"
#             "adelay: {adelay}",
#             bgm_file=bgm_file, output_file=output_file, sounds=sounds, adelay=adelay)
#
#    sorted_sounds = [Sound(x[0], x[1], x[2], x[3] if len(x) > 3 else False) for x in sounds]
#    sorted_sounds = sorted(sorted_sounds, key=lambda sd: sd.start)  # sorted by start time
#
#    sorted_sounds = yield to_stereo(sorted_sounds)
#    for sound in sorted_sounds:
#        vol = yield get_audio_volumes(sound.path)
#        sound.mean_volume = vol.get('mean', Decimal(-90))
#        sound.max_volume = vol.get('max', Decimal(-90))
#    bgm_vol = yield get_audio_volumes(bgm_file)
#    bgm_vol = bgm_vol.get('mean', Decimal(-90))
#
#    sounds_make_bgm_lower = []
#    sounds_to_concat = []
#    for s in sorted_sounds:
#        if s.max_volume > Decimal(-70):
#            sounds_to_concat.append(s)
#        if s.suppress:
#            sounds_make_bgm_lower.append(s)
#        elif s.max_volume > Decimal(-70) or s.mean_volume - VOLUME_LOWER - bgm_vol < 0:
#            sounds_make_bgm_lower.append(s)
#
#    if not (sounds_to_concat or sounds_make_bgm_lower):  # both empty
#        os.rename(bgm_file, output_file)
#        return
#
#    working_path = os.path.dirname(bgm_file)
#    whole_len = yield get_audio_duration(bgm_file)
#
#    if sounds_to_concat:
#        fgm = yield generate_foreground(sounds_to_concat, adelay, working_path, whole_len)
#    else:
#        fgm = None
#
#    if sounds_make_bgm_lower:
#        volume_filters = generate_filter_sequence(
#            sounds_make_bgm_lower, adelay, whole_len, bgm_vol)
#    else:
#        volume_filters = None




def generate_filter_sequence(sounds, adelay, whole_len, bgm_vol):
    """
    Generate a list of VolumeChange to represent ffmpeg volume filter string, which will adjust bgm volume.
    **Suggest refactoring in the future.**
    @param sounds: Foreground sounds.
    @type sounds: list[Sound]
    @param adelay: silence length in the beginning if prologue exists.
    @type adelay:
    @param whole_len: Bgm duration.
    @type whole_len: Decimal
    @param bgm_vol: Bgm volume.
    @type bgm_vol: Decimal
    @return: generated VolumeChange (s)
    @rtype: list[VolumeChange]
    """
    volume_filters = []  # type: list[VolumeChange]
    lower_volume = Decimal(0)
    if sounds[0].start != 0 or adelay:
        # fade in
        fade_start = sounds[0].start
        fade_end = sounds[0].start + min(Decimal(1.0), sounds[0].duration / 2)
        lower_volume = sounds[0].mean_volume - VOLUME_LOWER - bgm_vol
        volume_filters.append(
                VolumeChange(fade_start, fade_end, 'in', lower_volume, sounds[0].suppress))
    for i in xrange(len(sounds) - 1):  # check each interval between `sounds`
        diff = sounds[i+1].start - sounds[i].end
        lower_end = sounds[i].end
        if diff > 2.5:  # a long enough interval for bgm to rise to normal loudness
            # lower bgm when there is foreground voice
            lower_end = sounds[i].end - min(Decimal(1), sounds[i].duration / 2)
        lower_volume = sounds[i].mean_volume - VOLUME_LOWER - bgm_vol
        if not volume_filters:
            volume_filters.append(VolumeChange(sounds[i].start, lower_end,
                                               'lower', lower_volume, sounds[i].suppress))
        elif volume_filters[-1].change_type == 'lower':
            if volume_filters[-1].suppressed == sounds[i].suppress:
                volume_filters[-1].extend_to(new_end=lower_end, lower_volume=lower_volume,
                                             suppressed=sounds[i].suppress)
                try:
                    if volume_filters[-2].change_type == 'in' and not volume_filters[-2].from_to_silence:
                        volume_filters[-2].lower_volume = volume_filters[-1].lower_volume
                        volume_filters[-2].suppressed = volume_filters[-1].suppressed
                except IndexError:
                    pass
            else:
                if sounds[i].suppress:  # volume_filter[-1].suppress == False
                    fade_in_end = sounds[i].start + min(Decimal(1.0), sounds[i].duration / 2)
                    volume_filters.append(
                            VolumeChange(sounds[i].start, fade_in_end, 'in', lower_volume,
                                         suppressed=True, from_to_silence=True))
                    volume_filters.append(
                            VolumeChange(fade_in_end, lower_end, 'lower', Decimal(-91), True))
                else:  # volume_filter[-1].suppress == True
                    fade_out_end = sounds[i].start + min(Decimal(1.0), sounds[i].duration / 2)
                    volume_filters.append(
                            VolumeChange(sounds[i].start, fade_out_end, 'out', lower_volume,
                                         suppressed=False, from_to_silence=True))
                    volume_filters.append(
                            VolumeChange(fade_out_end, lower_end, 'lower', lower_volume))
        else:  # volume_filter[-1].change_type == 'in'
            lower_start = volume_filters[-1].end
            volume_filters.append(
                VolumeChange(lower_start, lower_end, 'lower', lower_volume, sounds[i].suppress))
        # add fading out/in
        if diff > 2.5:
            fade_out_start = lower_end
            fade_out_end = sounds[i].end
            volume_filters.append(
                    VolumeChange(fade_out_start, fade_out_end, 'out', lower_volume, sounds[i].suppress))

            fade_in_start = sounds[i+1].start
            fade_in_end = sounds[i+1].start + min(Decimal(1.0), sounds[i+1].duration / 2)
            lower_volume = sounds[i+1].mean_volume - VOLUME_LOWER - bgm_vol
            volume_filters.append(
                    VolumeChange(fade_in_start, fade_in_end, 'in', lower_volume, sounds[i+1].suppress))
#    if adelay:
#        whole_len += Decimal(adelay)
#    last_silent_len = whole_len - sounds[-1].end
#    lower_volume = sounds[-1].mean_volume - VOLUME_LOWER - bgm_vol
#    lower_end = whole_len
#    fade_out_start = sounds[-1].end - min(Decimal(1), sounds[-1].duration/2)
#    fade_out_end = sounds[-1].end
#    if last_silent_len > 1:
#        lower_end = sounds[-1].end - min(Decimal(1), sounds[-1].duration/2)
#    if not volume_filters:
#        volume_filters.append(VolumeChange(sounds[-1].start, lower_end,
#                                           'lower', lower_volume, sounds[-1].suppress))
#        if last_silent_len > 1:
#            volume_filters.append(VolumeChange(
#                    fade_out_start, fade_out_end, 'out', lower_volume, sounds[-1].suppress))
#    elif volume_filters[-1].change_type == 'lower':
#        if volume_filters[-1].suppressed == sounds[-1].suppress:
#            volume_filters[-1].extend_to(new_end=lower_end, lower_volume=lower_volume,
#                                         suppressed=sounds[-1].suppress)
#            try:
#                if volume_filters[-2].change_type == 'in' and not volume_filters[-2].from_to_silence:
#                    volume_filters[-2].lower_volume = volume_filters[-1].lower_volume
#                    volume_filters[-2].suppressed = volume_filters[-1].suppressed
#            except IndexError:
#                pass
#        else:
#            if sounds[-1].suppress:  # volume_filter[-1].suppress == False
#                fade_in_end = sounds[-1].start + min(Decimal(1.0), sounds[-1].duration / 2)
#                volume_filters.append(
#                        VolumeChange(sounds[-1].start, fade_in_end, 'in', lower_volume,
#                                     suppressed=True, from_to_silence=True))
#                volume_filters.append(
#                        VolumeChange(fade_in_end, lower_end, 'lower', Decimal(-91), True))
#            else:  # volume_filter[-1].suppress == True
#                fade_out_end = sounds[-1].start + min(Decimal(1.0), sounds[-1].duration / 2)
#                volume_filters.append(
#                        VolumeChange(sounds[-1].start, fade_out_end, 'out', lower_volume,
#                                     suppressed=False, from_to_silence=True))
#                volume_filters.append(
#                        VolumeChange(fade_out_end, lower_end, 'lower', lower_volume))
#    else:
#        volume_filters.append(VolumeChange(
#                volume_filters[-1].end, lower_end, 'lower', lower_volume, sounds[-1].suppress))
#    if last_silent_len > 1:
#        volume_filters.append(VolumeChange(
#                fade_out_start, fade_out_end, 'out', lower_volume, sounds[-1].suppress))
    return volume_filters



#def generate_filter_sequence(sounds, adelay, whole_len, bgm_vol):
#    """
#    Generate a list of VolumeChange to represent ffmpeg volume filter string, which will adjust bgm volume.
#    **Suggest refactoring in the future.**
#    @param sounds: Foreground sounds.
#    @type sounds: list[Sound]
#    @param adelay: silence length in the beginning if prologue exists.
#    @type adelay:
#    @param whole_len: Bgm duration.
#    @type whole_len: Decimal
#    @param bgm_vol: Bgm volume.
#    @type bgm_vol: Decimal
#    @return: generated VolumeChange (s)
#    @rtype: list[VolumeChange]
#    """
#    volume_filters = []  # type: list[VolumeChange]
#    lower_volume = Decimal(0)
#    if sounds[0].start != 0 or adelay:
#        # fade in
#        fade_start = sounds[0].start
#        fade_end = sounds[0].start + min(Decimal(1.0), sounds[0].duration / 2)
#        lower_volume = sounds[0].mean_volume - VOLUME_LOWER - bgm_vol
#        volume_filters.append(
#                VolumeChange(fade_start, fade_end, 'in', lower_volume, sounds[0].suppress))
#    for i in xrange(len(sounds) - 1):  # check each interval between `sounds`
#        diff = sounds[i+1].start - sounds[i].end
#        if diff > 2.5:  # a long enough interval for bgm to rise to normal loudness
#            # lower bgm when there is foreground voice
#            lower_end = sounds[i].end - min(Decimal(1), sounds[i].duration / 2)
#            lower_volume = sounds[i].mean_volume - VOLUME_LOWER - bgm_vol
#            if not volume_filters:
#                volume_filters.append(VolumeChange(sounds[i].start, lower_end,
#                                                   'lower', lower_volume, sounds[i].suppress))
#            elif volume_filters[-1].change_type == 'lower':
#                if volume_filters[-1].suppressed == sounds[i].suppress:
#                    volume_filters[-1].extend_to(new_end=lower_end, lower_volume=lower_volume,
#                                                 suppressed=sounds[i].suppress)
#                    try:
#                        if volume_filters[-2].change_type == 'in' and not volume_filters[-2].from_to_silence:
#                            volume_filters[-2].lower_volume = volume_filters[-1].lower_volume
#                            volume_filters[-2].suppressed = volume_filters[-1].suppressed
#                    except IndexError:
#                        pass
#                else:
#                    if sounds[i].suppress:  # volume_filter[-1].suppress == False
#                        fade_in_end = sounds[i].start + min(Decimal(1.0), sounds[i].duration / 2)
#                        volume_filters.append(
#                                VolumeChange(sounds[i].start, fade_in_end, 'in', lower_volume,
#                                             suppressed=True, from_to_silence=True))
#                        volume_filters.append(
#                                VolumeChange(fade_in_end, lower_end, 'lower', Decimal(-91), True))
#                    else:  # volume_filter[-1].suppress == True
#                        fade_out_end = sounds[i].start + min(Decimal(1.0), sounds[i].duration / 2)
#                        volume_filters.append(
#                                VolumeChange(sounds[i].start, fade_out_end, 'out', lower_volume,
#                                             suppressed=False, from_to_silence=True))
#                        volume_filters.append(
#                                VolumeChange(fade_out_end, lower_end, 'lower', lower_volume))
#            else:  # volume_filter[-1].change_type == 'in'
#                lower_start = volume_filters[-1].end
#                volume_filters.append(
#                    VolumeChange(lower_start, lower_end, 'lower', lower_volume, sounds[i].suppress))
#            # add fading out/in
#            fade_out_start = lower_end
#            fade_out_end = sounds[i].end
#            volume_filters.append(
#                    VolumeChange(fade_out_start, fade_out_end, 'out', lower_volume, sounds[i].suppress))
#
#            fade_in_start = sounds[i+1].start
#            fade_in_end = sounds[i+1].start + min(Decimal(1.0), sounds[i+1].duration / 2)
#            lower_volume = sounds[i+1].mean_volume - VOLUME_LOWER - bgm_vol
#            volume_filters.append(
#                    VolumeChange(fade_in_start, fade_in_end, 'in', lower_volume, sounds[i+1].suppress))
#        else:
#            lower_end = sounds[i].end
#            lower_volume = sounds[i].mean_volume - VOLUME_LOWER - bgm_vol
#            if not volume_filters:
#                volume_filters.append(VolumeChange(sounds[i].start, lower_end,
#                                                   'lower', lower_volume, sounds[i].suppress))
#            elif volume_filters[-1].change_type == 'lower':
#                if volume_filters[-1].suppressed == sounds[i].suppress:
#                    volume_filters[-1].extend_to(
#                            new_end=lower_end, lower_volume=lower_volume, suppressed=sounds[i].suppress)
#                    try:
#                        if volume_filters[-2].change_type == 'in' and not volume_filters[-2].from_to_silence:
#                            volume_filters[-2].lower_volume = volume_filters[-1].lower_volume
#                            volume_filters[-2].suppressed = volume_filters[-1].suppressed
#                    except IndexError:
#                        pass
#                else:
#                    if sounds[i].suppress:  # volume_filter[-1].suppress == False
#                        fade_in_end = sounds[i].start + min(Decimal(1.0), sounds[i].duration / 2)
#                        volume_filters.append(
#                                VolumeChange(sounds[i].start, fade_in_end, 'in', lower_volume,
#                                             suppressed=True, from_to_silence=True))
#                        volume_filters.append(
#                                VolumeChange(fade_in_end, lower_end, 'lower', Decimal(-91), True))
#                    else:  # volume_filter[-1].suppress == True
#                        fade_out_end = sounds[i].start + min(Decimal(1.0), sounds[i].duration / 2)
#                        volume_filters.append(
#                                VolumeChange(sounds[i].start, fade_out_end, 'out', lower_volume,
#                                             suppressed=False, from_to_silence=True))
#                        volume_filters.append(
#                                VolumeChange(fade_out_end, lower_end, 'lower', lower_volume))
#            else:
#                volume_filters.append(
#                        VolumeChange(volume_filters[-1].end, lower_end,
#                                     'lower', lower_volume, suppressed=sounds[i].suppress))
#    if adelay:
#        whole_len += Decimal(adelay)
#    last_silent_len = whole_len - sounds[-1].end
#    lower_volume = sounds[-1].mean_volume - VOLUME_LOWER - bgm_vol
#    if last_silent_len > 1:
#        lower_end = sounds[-1].end - min(Decimal(1), sounds[-1].duration/2)
#        fade_out_start = lower_end
#        fade_out_end = sounds[-1].end
#        if not volume_filters:
#            volume_filters.append(VolumeChange(sounds[-1].start, lower_end,
#                                               'lower', lower_volume, sounds[-1].suppress))
#            volume_filters.append(VolumeChange(
#                    fade_out_start, fade_out_end, 'out', lower_volume, sounds[-1].suppress))
#        elif volume_filters[-1].change_type == 'lower':
#            if volume_filters[-1].suppressed == sounds[-1].suppress:
#                volume_filters[-1].extend_to(new_end=lower_end, lower_volume=lower_volume,
#                                             suppressed=sounds[-1].suppress)
#                try:
#                    if volume_filters[-2].change_type == 'in' and not volume_filters[-2].from_to_silence:
#                        volume_filters[-2].lower_volume = volume_filters[-1].lower_volume
#                        volume_filters[-2].suppressed = volume_filters[-1].suppressed
#                except IndexError:
#                    pass
#            else:
#                if sounds[-1].suppress:  # volume_filter[-1].suppress == False
#                    fade_in_end = sounds[-1].start + min(Decimal(1.0), sounds[-1].duration / 2)
#                    volume_filters.append(
#                            VolumeChange(sounds[-1].start, fade_in_end, 'in', lower_volume,
#                                         suppressed=True, from_to_silence=True))
#                    volume_filters.append(
#                            VolumeChange(fade_in_end, lower_end, 'lower', Decimal(-91), True))
#                else:  # volume_filter[-1].suppress == True
#                    fade_out_end = sounds[-1].start + min(Decimal(1.0), sounds[-1].duration / 2)
#                    volume_filters.append(
#                            VolumeChange(sounds[-1].start, fade_out_end, 'out', lower_volume,
#                                         suppressed=False, from_to_silence=True))
#                    volume_filters.append(
#                            VolumeChange(fade_out_end, lower_end, 'lower', lower_volume))
#        else:
#            volume_filters.append(VolumeChange(
#                    volume_filters[-1].end, lower_end, 'lower', lower_volume, sounds[-1].suppress))
#        volume_filters.append(VolumeChange(
#                fade_out_start, fade_out_end, 'out', lower_volume, sounds[-1].suppress))
#    else:  # keep low volume till the end of file
#        if not volume_filters:
#            volume_filters.append(VolumeChange(
#                    sounds[-1].start, whole_len, 'lower', lower_volume, sounds[-1].suppress))
#        elif volume_filters[-1].change_type == 'lower':
#            if volume_filters[-1].suppressed == sounds[-1].suppress:
#                volume_filters[-1].extend_to(new_end=whole_len, lower_volume=lower_volume,
#                                             suppressed=sounds[-1].suppress)
#                try:
#                    if volume_filters[-2].change_type == 'in' and not volume_filters[-2].from_to_silence:
#                        volume_filters[-2].lower_volume = volume_filters[-1].lower_volume
#                        volume_filters[-2].suppressed = volume_filters[-1].suppressed
#                except IndexError:
#                    pass
#            else:
#                if sounds[-1].suppress:  # volume_filter[-1].suppress == False
#                    fade_in_end = sounds[-1].start + min(Decimal(1.0), sounds[-1].duration / 2)
#                    volume_filters.append(
#                            VolumeChange(sounds[-1].start, fade_in_end, 'in', lower_volume,
#                                         suppressed=True, from_to_silence=True))
#                    volume_filters.append(
#                            VolumeChange(fade_in_end, sounds[-1].end, 'lower', Decimal(-91), True))
#                else:  # volume_filter[-1].suppress == True
#                    fade_out_end = sounds[-1].start + min(Decimal(1.0), sounds[-1].duration / 2)
#                    volume_filters.append(
#                            VolumeChange(sounds[-1].start, fade_out_end, 'out', lower_volume,
#                                         suppressed=False, from_to_silence=True))
#                    volume_filters.append(
#                            VolumeChange(fade_out_end, sounds[-1].end, 'lower', lower_volume))
#        else:
#            volume_filters.append(VolumeChange(
#                    volume_filters[-1].end, whole_len, 'lower', lower_volume, sounds[-1].suppress))
#    return volume_filters


if __name__ == "__main__":
    """ generate_filter_sequence(sounds, adelay, whole_len, bgm_vol):
    Generate a list of VolumeChange to represent ffmpeg volume filter string, which will adjust bgm volume.
    **Suggest refactoring in the future.**
    @param sounds: Foreground sounds.
    @type sounds: list[Sound]
    @param adelay: silence length in the beginning if prologue exists.
    @type adelay:
    @param whole_len: Bgm duration.
    @type whole_len: Decimal
    @param bgm_vol: Bgm volume.
    @type bgm_vol: Decimal
    """
    a = Sound("aaa", 3, 10)
    q = []
    q.append(a)
    a = Sound("aaa", 16, 10)
    q.append(a)
    a = Sound("aaa", 28, 10)
    q.append(a)
    a = Sound("aaa", 50, 8)
    q.append(a)

    print "=================================================================="
    nums = generate_filter_sequence(q, None, Decimal(60.47), Decimal(20))
    for num in nums:
        print num
